<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Resultadoensayo', 'pcb');

/**
 * BaseResultadoensayo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $ensayook
 * @property string $error
 * @property float $tension5v
 * @property float $tension12v
 * @property float $tensioncorr
 * @property string $velocidades
 * @property string $numeroserie
 * @property timestamp $fecha
 * @property integer $placaid
 * @property string $observaciones
 * @property string $dcf
 * @property integer $paso
 * @property Placa $Placa
 * 
 * @method integer         getId()            Returns the current record's "id" value
 * @method integer         getEnsayook()      Returns the current record's "ensayook" value
 * @method string          getError()         Returns the current record's "error" value
 * @method float           getTension5v()     Returns the current record's "tension5v" value
 * @method float           getTension12v()    Returns the current record's "tension12v" value
 * @method float           getTensioncorr()   Returns the current record's "tensioncorr" value
 * @method string          getVelocidades()   Returns the current record's "velocidades" value
 * @method string          getNumeroserie()   Returns the current record's "numeroserie" value
 * @method timestamp       getFecha()         Returns the current record's "fecha" value
 * @method integer         getPlacaid()       Returns the current record's "placaid" value
 * @method string          getObservaciones() Returns the current record's "observaciones" value
 * @method string          getDcf()           Returns the current record's "dcf" value
 * @method integer         getPaso()          Returns the current record's "paso" value
 * @method Placa           getPlaca()         Returns the current record's "Placa" value
 * @method Resultadoensayo setId()            Sets the current record's "id" value
 * @method Resultadoensayo setEnsayook()      Sets the current record's "ensayook" value
 * @method Resultadoensayo setError()         Sets the current record's "error" value
 * @method Resultadoensayo setTension5v()     Sets the current record's "tension5v" value
 * @method Resultadoensayo setTension12v()    Sets the current record's "tension12v" value
 * @method Resultadoensayo setTensioncorr()   Sets the current record's "tensioncorr" value
 * @method Resultadoensayo setVelocidades()   Sets the current record's "velocidades" value
 * @method Resultadoensayo setNumeroserie()   Sets the current record's "numeroserie" value
 * @method Resultadoensayo setFecha()         Sets the current record's "fecha" value
 * @method Resultadoensayo setPlacaid()       Sets the current record's "placaid" value
 * @method Resultadoensayo setObservaciones() Sets the current record's "observaciones" value
 * @method Resultadoensayo setDcf()           Sets the current record's "dcf" value
 * @method Resultadoensayo setPaso()          Sets the current record's "paso" value
 * @method Resultadoensayo setPlaca()         Sets the current record's "Placa" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseResultadoensayo extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('resultadoensayo');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('ensayook', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('error', 'string', 2048, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2048,
             ));
        $this->hasColumn('tension5v', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('tension12v', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('tensioncorr', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('velocidades', 'string', 1024, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1024,
             ));
        $this->hasColumn('numeroserie', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('fecha', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('placaid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('observaciones', 'string', 2048, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2048,
             ));
        $this->hasColumn('dcf', 'string', 256, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 256,
             ));
        $this->hasColumn('paso', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Placa', array(
             'local' => 'placaid',
             'foreign' => 'id'));
    }
}