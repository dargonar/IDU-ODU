<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Itemetiqueta', 'pcb');

/**
 * BaseItemetiqueta
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $font
 * @property integer $size
 * @property integer $bold
 * @property integer $italic
 * @property integer $xini
 * @property integer $xfin
 * @property integer $yini
 * @property integer $yfin
 * @property integer $variable
 * @property integer $tipo
 * @property integer $rot
 * @property integer $alignh
 * @property integer $alignv
 * @property integer $etiquetaid
 * @property string $valor
 * @property Etiqueta $Etiqueta
 * 
 * @method integer      getId()         Returns the current record's "id" value
 * @method string       getFont()       Returns the current record's "font" value
 * @method integer      getSize()       Returns the current record's "size" value
 * @method integer      getBold()       Returns the current record's "bold" value
 * @method integer      getItalic()     Returns the current record's "italic" value
 * @method integer      getXini()       Returns the current record's "xini" value
 * @method integer      getXfin()       Returns the current record's "xfin" value
 * @method integer      getYini()       Returns the current record's "yini" value
 * @method integer      getYfin()       Returns the current record's "yfin" value
 * @method integer      getVariable()   Returns the current record's "variable" value
 * @method integer      getTipo()       Returns the current record's "tipo" value
 * @method integer      getRot()        Returns the current record's "rot" value
 * @method integer      getAlignh()     Returns the current record's "alignh" value
 * @method integer      getAlignv()     Returns the current record's "alignv" value
 * @method integer      getEtiquetaid() Returns the current record's "etiquetaid" value
 * @method string       getValor()      Returns the current record's "valor" value
 * @method Etiqueta     getEtiqueta()   Returns the current record's "Etiqueta" value
 * @method Itemetiqueta setId()         Sets the current record's "id" value
 * @method Itemetiqueta setFont()       Sets the current record's "font" value
 * @method Itemetiqueta setSize()       Sets the current record's "size" value
 * @method Itemetiqueta setBold()       Sets the current record's "bold" value
 * @method Itemetiqueta setItalic()     Sets the current record's "italic" value
 * @method Itemetiqueta setXini()       Sets the current record's "xini" value
 * @method Itemetiqueta setXfin()       Sets the current record's "xfin" value
 * @method Itemetiqueta setYini()       Sets the current record's "yini" value
 * @method Itemetiqueta setYfin()       Sets the current record's "yfin" value
 * @method Itemetiqueta setVariable()   Sets the current record's "variable" value
 * @method Itemetiqueta setTipo()       Sets the current record's "tipo" value
 * @method Itemetiqueta setRot()        Sets the current record's "rot" value
 * @method Itemetiqueta setAlignh()     Sets the current record's "alignh" value
 * @method Itemetiqueta setAlignv()     Sets the current record's "alignv" value
 * @method Itemetiqueta setEtiquetaid() Sets the current record's "etiquetaid" value
 * @method Itemetiqueta setValor()      Sets the current record's "valor" value
 * @method Itemetiqueta setEtiqueta()   Sets the current record's "Etiqueta" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseItemetiqueta extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('itemetiqueta');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('font', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('size', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('bold', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('italic', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('xini', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('xfin', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('yini', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('yfin', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('variable', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tipo', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('rot', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('alignh', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('alignv', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('etiquetaid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('valor', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 128,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Etiqueta', array(
             'local' => 'etiquetaid',
             'foreign' => 'id'));
    }
}